#ifndef JAHOUTF_HPP
#define JAHOUTF_HPP

#include <list>
#include <map>
#include <algorithm>
#include <exception>
#include <memory>
#include <chrono>
#include <iostream>
#include <sstream>
#include <fstream>

// if c++11

// if c++14


// if gcc
#define JAHOUTF_GCC 1

// ms



class jahoutf
{
	std::string name_;

	enum col { R, G, B, C, Y, M, K, W, I };

public:

	bool silent = false;
	void out_msg(const std::string& msg, const col& c = W) 
	{ 
		if (!silent) 
		{ 

#ifdef JAHOUTF_GCC
			switch (c)
			{
				case K: std::cout << "\033[1;30m" << msg << "\033[0m"; break;
				case R: std::cout << "\033[1;31m" << msg << "\033[0m"; break;
				case G: std::cout << "\033[1;32m" << msg << "\033[0m"; break;
				case Y: std::cout << "\033[1;33m" << msg << "\033[0m"; break;
				case B: std::cout << "\033[1;34m" << msg << "\033[0m"; break;
				case M: std::cout << "\033[1;35m" << msg << "\033[0m"; break;
				case C: std::cout << "\033[1;36m" << msg << "\033[0m"; break;
				case W: std::cout << "\033[0;37m" << msg << "\033[0m"; break;
				case I: std::cout << "\033[1;7m" << msg << "\033[0m"; break;
			}
#endif
		} 
	}

	void out_progress_bar(unsigned int successes, unsigned int failures)
	{
		unsigned int total = successes + failures;
		unsigned int length = 20;
		float percentage = static_cast<float>(failures) / static_cast<float>(total);
		unsigned int f_bar = static_cast<int>(percentage * static_cast<float>(length));
		if (!f_bar && failures)
			f_bar = 1;
		unsigned int s_bar = length - f_bar;
		out_msg("|");
		if (s_bar)
			out_msg(std::string(s_bar, '='), col::G);
		if (f_bar)
			out_msg(std::string(f_bar, '='), col::R);
		out_msg("| ");
	}

	void out_result(unsigned int passes, unsigned int failed, float time)
	{
		out_msg(" " + std::to_string(passes + failed) + " tests run. ");
		out_msg(" (" + std::to_string(time) + " secs) ");
		out_msg(" " + std::to_string(passes) + " passed. ", col::G);
		if (failed)
			out_msg(" " + std::to_string(failed) + " failed. ", col::R);
		out_msg("\n");
	}

	std::string filepath;

	typedef std::pair<unsigned int, unsigned int> result_data;
	typedef std::chrono::milliseconds duration_data;
	
	
	jahoutf() { out_msg("-----------------------------\n"); }

	jahoutf(const std::string& name) : name_(name) 
	{ 
		out_msg("-----------------------------\n");
		out_msg("Running tests " + name_ + "\n"); 
	}

	~jahoutf()
	{
		
		if (std::uncaught_exceptions() == __cpp_lib_uncaught_exceptions)
		{
			
		}

		// ==========
		// () : 0 of 10 tests passed, took 4637467 secs.
		// (A) : 1 of 5 tests passed, took 4637467 secs.
		// (A) : 5 of 5 tests passed, took 4637467 secs.
		//  9 of 10 tests passed, took 4637467 secs.
		// ==========
		// Total 9 of 20 passed. (43674673 secs)

		out_msg("\n-----------------------------\n");
		unsigned int tests_failed = 0, tests_passed = 0;
		float total_time_taken = 0.0;
		for (auto g = tests_.begin(); g != tests_.end(); ++g)
		{
			// Add all the test results together...
			unsigned int group_test_passes = 0, group_test_fails = 0;
			float group_duration = 0.0;
			for (auto t = g->second.begin(); t != g->second.end(); ++t)
			{
				auto r = t->results();
				if (r.second > 0)
					++group_test_fails;
				else if (r.first > 0)
					++group_test_passes;
				group_duration += std::chrono::duration<float>(t->duration()).count();
			}
			out_msg(g->first, col::I);
			out_result(group_test_passes, group_test_fails, group_duration);
			tests_passed += group_test_passes;
			tests_failed += group_test_fails;
			total_time_taken += group_duration;
		}	
		out_msg("-----------------------------\n  ");
		out_progress_bar(tests_passed, tests_failed);
		out_result(tests_passed, tests_failed, total_time_taken);
		out_msg("\n");
	}

	class test_data
	{
	public:
		test_data(const std::string& name) : name_(name) {}
		std::string name_;
		std::list<std::string> failures_, successes_;
		std::chrono::steady_clock::time_point begin_;
		duration_data duration_;

		result_data results() { return result_data(successes_.size(), failures_.size()); }
		duration_data duration() { return duration_; }
	};

	class test_handle
	{
		test_data& td_;
		jahoutf& session_;
	public:
		test_handle(const std::string& group, test_data& td, jahoutf& session) : td_(td), session_(session)
		{
			session_.out_msg("-- ", I);
			if (!group.empty())
				session_.out_msg(group, col::I);
			session_.out_msg(" (" + td_.name_ + ") ");
		}

		~test_handle()
		{
			td_.duration_ = std::chrono::duration_cast<duration_data>(std::chrono::steady_clock::now() - td_.begin_);
			if (std::uncaught_exceptions() == __cpp_lib_uncaught_exceptions)
			{
				// unhandled exception..
				fail(__FILE__, __LINE__, "Unhandled exception occured...");
			}
			auto r = td_.results();
			session_.out_msg("\n--");
			session_.out_progress_bar(r.first, r.second);
			session_.out_msg(std::to_string(r.first) + "/" + std::to_string(r.first + r.second) + " Assertions passed.");
			session_.out_msg(" (" + std::to_string(td_.duration_.count()) + " ms)\n");
		}

		void succeed(const std::string& file, unsigned int lineNum, const std::string& msg = "")
		{
			td_.successes_.push_back(msg);
			if (!msg.empty()) { session_.out_msg("\n * " + msg); }
		}

		void fail(const std::string& file, unsigned int lineNum, const std::string& msg = "")
		{
			td_.failures_.push_back(msg);
			session_.out_msg("\n * ");
			session_.out_msg("FAILED ", col::R);
			session_.out_msg(file, col::C);
			session_.out_msg(":");
			session_.out_msg(std::to_string(lineNum), col::Y);
			if (!msg.empty()) 
				session_.out_msg(" " + msg);
		}
	};

	std::unique_ptr<test_handle> test(const std::string& group, const std::string& name)
	{
		tests_[group].push_back(test_data(name));
		return std::make_unique<test_handle>(group, tests_[group].back(), *this);
	}

	// template<class F>
	// std::unique_ptr<F> test_fixture(const std::string& group, const std::string& name)
	// {
	// 	tests_[group].push_back(test_data(name));
	// 	return std::make_unique<F>(grou p, tests_[group].back(), *this);
	// }

private:
	std::map<std::string,std::list<test_data>> tests_;

public:

	void out_xml()
	{
		if (filepath.empty()) return;
		std::ofstream xml(filepath.c_str());
		if (xml.is_open())
		{

		}
	}
};


// Macro for main
// Macro for non main

extern jahoutf current_jahoutf_instance;

#define JAHOUTF_INIT(name) jahoutf current_jahoutf_instance = jahoutf(#name);

// Also we shoudl process arguments here e.g
// example -jahoutf_silence -jahoutf_xml=somefile.xml

#define JAHOUTF_MAIN(name) JAHOUTF_INIT(name) \
int main_impl();					\
int main(int argc, char** argv)		\
{									\
	try								\
	{								\
		return main_impl();			\
	}								\
	catch (...)						\
	{								\
		current_jahoutf_instance.out_msg("Uh oh.. unhandled exception caught.\n");							\
	}								\
	return 1;						\
}									\
int main_impl()

// Macro to create a test case...
#define TEST_CASE_1(group, name) if (auto current_jahoutf_test = current_jahoutf_instance.test(#group, #name))
#define TEST_CASE_2(name) if (auto current_jahoutf_test = current_jahoutf_instance.test("", #name))

#define GET_TEST_CASE_MACRO(_1,_2,TCNAME,...) TCNAME
#define TEST(...) GET_TEST_CASE_MACRO(__VA_ARGS__, TEST_CASE_1, TEST_CASE_2)(__VA_ARGS__)

// Macro to create fixtures...
// #define TEST_FIXTURE_1(fixture, group, name) if (auto current_jahoutf_test = current_jahoutf_instance.test_fixture<fixture>(#group, #name))
// #define TEST_FIXTURE_2(fixture, name) if (auto current_jahoutf_test = current_jahoutf_instance.test_fixture<fixture>("", #name))
// //#define TEST_FIXTURE_3(fixture) if (auto current_jahoutf_test = current_jahoutf_instance.test_fixture<fixture>("", #name))

// #define GET_TEST_FIXTURE_MACRO(_1,_2,_3,TFNAME,...) TFNAME
// #define TEST_F(...) GET_TEST_FIXTURE_MACRO(__VA_ARGS__, TEST_FIXTURE_1, TEST_FIXTURE_2, TEST_FIXTURE_3)(__VA_ARGS__)




// Assertion Macros
#define SUCCESS current_jahoutf_test->succeed(__FILE__, __LINE__, "");
#define FAIL current_jahoutf_test->fail(__FILE__, __LINE__, "");
#define EXPECT_EQ(a, b) if (a == b) { SUCCESS } else { FAIL };
#define EXPECT(a) EXPECT_EQ(a, true);
#define EXPECT_NEAR(a, b, e) if (abs(b-a) <= e) { SUCCESS } else { FAIL };




#endif // JAHOUTF_HPP

//#include <iostream>
//#include <chrono>
//
//#include <sstream>
///**
// * Generate a UTC ISO8601-formatted timestamp
// * and return as std::string
// */
//std::string currentISO8601TimeUTC() {
//	auto now = std::chrono::system_clock::now();
//	auto itt = std::chrono::system_clock::to_time_t(now);
//	std::ostringstream ss;
//	ss << std::put_time(gmtime(&itt), "%FT%TZ");
//	return ss.str();
//}

// Main macro...

// Expect_EQ

// Fail

// Sucess

// #include "XML.hpp"
// #include "StringHelpers.hpp"

// #include <chrono>
// #include <exception>
// #include <functional>
// #include <iomanip>
// #include <iostream>
// #include <list>
// #include <memory>
// //#include <ctime>


// // Macro to create an integration test...

// namespace Axiom
// {
// 	// https://stackoverflow.com/questions/4922867/what-is-the-junit-xml-format-specification-that-hudson-supports
// 	// std::cout.setstate(std::ios_base::failbit);   to surpress cout...
// 	// std::cout.clear();   to enable it again...

// 	class TestSuite
// 	{
// 	public:

// 		TestSuite() 
// 		{
// 			std::cout << "\n[==========] ";
// 			std::cout << "\n[----------] ";
// 		}

// 		TestSuite(const std::string& name)
// 			:	name_(name)
// 		{
// 			std::cout << "\n[==========]" << name_ << " ";
// 			std::cout << "\n[----------] ";
// 		}

// 		~TestSuite()
// 		{
// 			auto result = Results();

// 			if (result.second)
// 			{
// 				std::cout << "\n[==========] " << name_ << " " << result.second << " of " << (result.first + result.second) << " tests failed. " << " (" << TimeTaken() << " ms) ";
// 				std::cout << "\n[= FAILED =] DEFCON 1 peeps... DEFCON 1 ";
// 			}
// 			else
// 			{
// 				std::cout << "\n[==========] " << name_ << " " << result.first << " of " << (result.first + result.second) << " tests passed. " << " (" << TimeTaken() << " ms) ";
// 				std::cout << "\n[= PASSED =] Confidence is high! ";
// 			}
				
// 		}

// 		struct TestCaseData
// 		{
// 			TestCaseData(const std::string& name, const std::string& groupName)
// 				: name_(name), group_(groupName)
// 			{
// 			}

// 			std::pair<unsigned int, unsigned int> Results() { return std::make_pair(successes_.size(), failures_.size()); }
// 			long TimeTaken() { return duration_; }
			
// 			std::string name_;
// 			std::string group_;
// 			std::list<std::string> failures_;
// 			std::list<std::string> successes_;
// 			std::chrono::steady_clock::time_point begin_;
// 			long duration_;
// 		};

// 		struct TestGroupData
// 		{
// 			TestGroupData(const std::string& name)
// 				: name_(name)
// 			{
// 			}

// 			long TimeTaken()
// 			{
// 				long totalDuration = 0;
// 				for (auto tsItr = groups_.begin(); tsItr != groups_.end(); ++tsItr)
// 					totalDuration += tsItr->TimeTaken();
// 				for (auto tcItr = tests_.begin(); tcItr != tests_.end(); ++tcItr)
// 					totalDuration += tcItr->duration_;

// 				return totalDuration;
// 			}
// 			std::pair<unsigned int, unsigned int> Results()
// 			{
// 				unsigned int successes = 0, failures = 0;
// 				for (auto tsItr = groups_.begin(); tsItr != groups_.end(); ++tsItr)
// 				{
// 					auto result = tsItr->Results();
// 					successes += result.first;
// 					failures += result.second;
// 				}
// 				for (auto tcItr = tests_.begin(); tcItr != tests_.end(); ++tcItr)
// 				{
// 					auto result = tcItr->Results();
// 					successes += result.first;
// 					failures += result.second;
// 				}
// 				return std::make_pair(successes, failures);
// 			}

// 			std::string name_;
// 			std::list<TestCaseData> tests_;	
// 			std::list<TestGroupData> groups_;
// 		};

// 		class TestCase
// 		{
// 		public:
// 			TestCase(TestCaseData& tcd)
// 				:	tcd_(tcd)
// 			{
// 				std::cout << "\n[ RUN      ] " << tcd_.group_ << "." << tcd_.name_ << " ";

// 				// start the timer...
// 				tcd_.begin_ = std::chrono::steady_clock::now();
// 			}
// 			~TestCase()
// 			{
// 				// Stop the timer...
// 				tcd_.duration_ = static_cast<long>(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::steady_clock::now() - tcd_.begin_).count());

// 				// Is this destructing due to exception or natural destruction?
// 				if (std::uncaught_exceptions())
// 					Fail("Uncaught exception(s) thrown during " + tcd_.group_ + ":" + tcd_.name_);
				
// 				// Output the results...
// 				if (!tcd_.failures_.empty())
// 					std::cout << "\n[  FAILED  ] " << tcd_.group_ << "." << tcd_.name_ << " (" << tcd_.TimeTaken() << " ms) ";
// 				else
// 					std::cout << "\n[       OK ] " << tcd_.group_ << "." << tcd_.name_ << " (" << tcd_.TimeTaken() << " ms) ";
// 			}

// 			void Success(const std::string& message = "") 
// 			{ 
// 				tcd_.successes_.push_back(message); 
// 				if (!message.empty())
// 					std::cout << "\n" << message << " ";
// 			}
// 			void Fail(const std::string& message = "") 
// 			{ 
// 				tcd_.failures_.push_back(message); 
// 				if (!message.empty())
// 					std::cout << "\n" << message << " ";
// 			}

// 			// Prevent copy
// 			TestCase(const TestCase& obj) = delete;
// 			TestCase& operator=(const TestCase& obj) = delete;

// 		private:
// 			TestCaseData& tcd_;
// 		};

// 		class TestGroup
// 		{
// 		public:
// 			TestGroup(TestGroupData& tsd)
// 				:	tsd_(tsd)
// 			{
// 				std::cout << "\n\n[----------] " << tsd_.name_ << " ";
// 			}
// 			~TestGroup()
// 			{
// 				// Is this destructing due to exception or natural destruction?
// 				if (std::uncaught_exceptions())
// 					std::cout << "\nUncaught exception(s) thrown during " << tsd_.name_ << " ";
				
// 				auto results = tsd_.Results();
				
// 				if ((results.first + results.second) == 0)
// 					std::cout << "\n[-NO TESTS-] " << tsd_.name_ << " ";
// 				else if (results.second)
// 					std::cout << "\n[--FAILED--] " << tsd_.name_ << " " << results.second << " of " << (results.first + results.second) << " tests failed. " << " (" << tsd_.TimeTaken() << " ms) ";
// 				else
// 					std::cout << "\n[--PASSED--] " << tsd_.name_ << " " << results.first << " of " << (results.first + results.second) << " tests passed. " << " (" << tsd_.TimeTaken() << " ms) ";
// 			}

// 			TestCase Test(const std::string& testName)
// 			{
// 				// Create the new test case..
// 				tsd_.tests_.push_back(TestCaseData(testName, tsd_.name_));
// 				return TestCase(tsd_.tests_.back());
// 			}
// 			TestGroup Group(const std::string& testSuiteName)
// 			{
// 				// Create the new test group..
// 				tsd_.groups_.push_back(TestGroupData(testSuiteName));
// 				return TestGroup(tsd_.groups_.back());
// 			}

// 			// Prevent copy
// 			TestGroup(const TestGroup& obj) = delete;
// 			TestGroup& operator=(const TestGroup& obj) = delete;
			
// 		private:
// 			TestGroupData& tsd_; 

// 		};
		
// 		TestGroup Group(const std::string& testSuiteName)
// 		{
// 			// Create the new test group..
// 			groups_.push_back(TestGroupData(testSuiteName));
// 			return TestGroup(groups_.back());
// 		}

// 		long TimeTaken()
// 		{
// 			long totalDuration = 0;
// 			for (auto tsItr = groups_.begin(); tsItr != groups_.end(); ++tsItr)
// 				totalDuration += tsItr->TimeTaken();
// 			return totalDuration;
// 		}

// 		std::pair<unsigned int, unsigned int> Results()
// 		{
// 			unsigned int successes = 0, failures = 0;
// 			for (auto tsItr = groups_.begin(); tsItr != groups_.end(); ++tsItr)
// 			{
// 				auto result = tsItr->Results();
// 				successes += result.first;
// 				failures += result.second;
// 			}
// 			return std::make_pair(successes, failures);
// 		}

// 	private:
// 		Axiom::XML::Element OutputXMLTestCase(TestCaseData& tcd)
// 		{
// 			auto results = tcd.Results();

// 			// If there are any failures...
// 			if (!tcd.failures_.empty())
// 			{
// 				//<testcase name = "GetSummertimeTemperatureWithMechVentContinuousTreated19Degrees" status = "run" time = "0.001" classname = "CibseSimpleHeatGainBehaviour2015Test">
// 				//	<failure message = "c:\users\cordell\documents\soc2\soc\source\unittests\testenergymodel\heatgain.test.cpp:340&#x0A;The difference between TestHelpers::RoundToTwoDecimalPlaces(summertimeTemperature) and 47.84 is 0.52000000000000313, which exceeds 0.1, where&#x0A;TestHelpers::RoundToTwoDecimalPlaces(summertimeTemperature) evaluates to 47.32,&#x0A;47.84 evaluates to 47.840000000000003, and&#x0A;0.1 evaluates to 0.10000000000000001." type = ""><![CDATA[c:\users\cordell\documents\soc2\soc\source\unittests\testenergymodel\heatgain.test.cpp:340
// 				//	The difference between TestHelpers::RoundToTwoDecimalPlaces(summertimeTemperature) and 47.84 is 0.52000000000000313, which exceeds 0.1, where
// 				//	TestHelpers::RoundToTwoDecimalPlaces(summertimeTemperature) evaluates to 47.32,
// 				//	47.84 evaluates to 47.840000000000003, and
// 				//	0.1 evaluates to 0.10000000000000001.]]>< / failure>
// 				//	< / testcase>

// 				Axiom::XML::Element testcase("testcase",
// 					{
// 						Axiom::XML::Attribute("name", tcd.name_),
// 						Axiom::XML::Attribute("status", "run"),
// 						Axiom::XML::Attribute("time", Axiom::StringFromNumeric<long>(tcd.TimeTaken())),
// 						Axiom::XML::Attribute("classname", tcd.group_)
// 					}, "");

// 				for (auto failure = tcd.failures_.begin(); failure != tcd.failures_.end(); ++failure)
// 				{
// 					// Create out failure element and add it to the test case...
// 					Axiom::XML::Element f("failure", 
// 						{
// 							Axiom::XML::Attribute("message", *failure),
// 							Axiom::XML::Attribute("type", ""),
// 						}, "");

// 					// We also need to put in the content??? 
// 					// <![CDATA[c:\users\cordell\documents\soc2\soc\source\unittests\testenergymodel\heatgain.test.cpp:340 The difference between 
// 					// TestHelpers::RoundToTwoDecimalPlaces(summertimeTemperature) and 47.84 is 0.52000000000000313, which exceeds 0.1, 
// 					// where TestHelpers::RoundToTwoDecimalPlaces(summertimeTemperature) evaluates to 47.32, 47.84 evaluates to 47.840000000000003, 
// 					// and 0.1 evaluates to 0.10000000000000001.]]>
// 					//f.Content() = "SomeContent";

// 					testcase.Elements().push_back(f);
// 				}

// 				return testcase;
// 			}
// 			else
// 			{
// 				// <testcase name="GetSizingPeriodOptions" status="run" time="0" classname="EWDesignDay2020BehaviourTest" />
// 				return Axiom::XML::Element("testcase",
// 					{
// 						Axiom::XML::Attribute("name", tcd.name_),
// 						Axiom::XML::Attribute("status", "run"),
// 						Axiom::XML::Attribute("time", Axiom::StringFromNumeric<long>(tcd.TimeTaken())),
// 						Axiom::XML::Attribute("classname", tcd.group_)
// 					}, "");
// 			}

// 		}

// 		Axiom::XML::Element OutputXMLTestSuite(TestGroupData& tgd)
// 		{
// 			std::chrono::seconds secs = std::chrono::duration_cast<std::chrono::seconds>(std::chrono::milliseconds(tgd.TimeTaken()));
// 			auto results = tgd.Results();

// 			Axiom::XML::Element element("testsuite",
// 				{
// 					Axiom::XML::Attribute("tests", Axiom::StringFromNumeric<unsigned int>(results.first + results.second)),
// 					Axiom::XML::Attribute("failures", Axiom::StringFromNumeric<unsigned int>(results.second)),
// 					Axiom::XML::Attribute("disabled", Axiom::StringFromNumeric<unsigned int>(0)),
// 					Axiom::XML::Attribute("errors", Axiom::StringFromNumeric<unsigned int>(0)),
// 					Axiom::XML::Attribute("time", Axiom::StringFromNumeric<float>(static_cast<float>(secs.count()))),
// 					Axiom::XML::Attribute("name", tgd.name_)
// 				}, "");

// 			for (auto groupItr = tgd.groups_.begin(); groupItr != tgd.groups_.end(); ++groupItr)
// 				element.Elements().push_back(OutputXMLTestSuite(*groupItr));

// 			// And output the actual tests for this group...
// 			for (auto testItr = tgd.tests_.begin(); testItr != tgd.tests_.end(); ++testItr)
// 				element.Elements().push_back(OutputXMLTestCase(*testItr));

// 			// <testsuite name="EWDesignDay2020BehaviourTest" tests="2" failures="0" disabled="0" errors="0" time="0.004">
// 			return element;
// 		}

// 		std::string ISO8601TimeUTC()
// 		{
// 			/*auto now = std::chrono::system_clock::now();
// 			auto itt = std::chrono::system_clock::to_time_t(now);
// 			std::ostringstream ss;
// 			ss << std::put_time(gmtime(&itt), "%FT%TZ");
// 			return ss.str();*/

// 			return "TheDayToday";
// 		}
		
// 	public:
// 		std::string OutputXML()
// 		{
// 			std::chrono::seconds secs = std::chrono::duration_cast<std::chrono::seconds>(std::chrono::milliseconds(TimeTaken()));

// 			// construct an ISO 8601 date...


// 			// <testsuites tests="127" failures="23" disabled="0" errors="0" timestamp="2021-01-20T16:24:19" time="4.173" name="AllTests">
// 			Axiom::XML::Element root("testsuites",
// 				{
// 					Axiom::XML::Attribute("tests", Axiom::StringFromNumeric<unsigned int>(Results().first + Results().second)),
// 					Axiom::XML::Attribute("failures", Axiom::StringFromNumeric<unsigned int>(Results().second)),
// 					Axiom::XML::Attribute("disabled", Axiom::StringFromNumeric<unsigned int>(0)),
// 					Axiom::XML::Attribute("errors", Axiom::StringFromNumeric<unsigned int>(0)),
// 					//Axiom::XML::Attribute("timestamp", date::format("%FT%TZ", date::floor<std::chrono::seconds>(std::chrono::system_clock::now()))),
// 					Axiom::XML::Attribute("timestamp", ISO8601TimeUTC()),
// 					Axiom::XML::Attribute("time", Axiom::StringFromNumeric<float>(static_cast<float>(secs.count()))),
// 					Axiom::XML::Attribute("name", name_)
// 				}, "");

// 			// add all the groups as child elements...
// 			for (auto groupItr = groups_.begin(); groupItr != groups_.end(); ++groupItr)
// 				root.Elements().push_back(OutputXMLTestSuite(*groupItr));

// 			return Axiom::XML::GenerateSyntax(root);
// 		}

// 	private:
// 		std::list<TestGroupData> groups_;
// 		std::string name_;

// 	};
// }

// #endif // AXIOM_TESTSUITE_HPP
